events {
    worker_connections 1024;
}

# Stream module cho UDP load balancing (WireGuard)
stream {
    # Logging cho stream
    error_log /var/log/nginx/stream_error.log;
    access_log off;
    
    # WireGuard UDP load balancer
    upstream wireguard_udp_cluster {
        server wg-vpn:51820 weight=3 max_fails=2 fail_timeout=30s;
        server wg-vpn-2:51820 weight=2 max_fails=2 fail_timeout=30s;
        server wg-vpn-3:51820 weight=1 max_fails=2 fail_timeout=30s;
        
        # Load balancing method cho UDP
        least_conn;
    }
    
    # Load balance WireGuard UDP traffic
    server {
        listen 51820 udp;
        proxy_pass wireguard_udp_cluster;
        proxy_timeout 3s;
        proxy_responses 1;
        proxy_connect_timeout 3s;
        # proxy_bind $remote_addr transparent;  # Comment out vÃ¬ cÃ³ thá»ƒ cáº§n privileges
        error_log /var/log/nginx/wireguard_udp_error.log;
    }
}

http {
    # Minimal settings for testing
    sendfile on;
    keepalive_timeout 65;
    
    # Logging
    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;
    
    # Load Balancer cho WireGuard instances
    upstream wireguard_cluster {
        # Primary WireGuard servers
        server wg-vpn:51820 weight=3 max_fails=2 fail_timeout=30s;
        server wg-vpn-2:51820 weight=2 max_fails=2 fail_timeout=30s;
        server wg-vpn-3:51820 weight=1 max_fails=2 fail_timeout=30s backup;
        
        # Load balancing method
        least_conn;  # Káº¿t ná»‘i Ã­t nháº¥t
        
        keepalive 32;
        keepalive_requests 100;
        keepalive_timeout 60s;
    }
    
    # WireGuard management API upstream  
    upstream wireguard_api {
        server wg-vpn:8080 weight=1 max_fails=3 fail_timeout=30s;
        server wg-vpn-2:8080 weight=1 max_fails=3 fail_timeout=30s;
        server wg-vpn-3:8080 weight=1 max_fails=3 fail_timeout=30s;
        
        # Health check cho API
        keepalive 16;
    }
    
    # HTTP server for testing
    server {
        listen 80;
        server_name _;
        
        # Health check endpoint cho load balancer
        location /health {
            access_log off;
            return 200 "nginx-lb-ok\nUpstream: wireguard_cluster\nStatus: Load Balancing Active\n";
            add_header Content-Type text/plain;
            add_header X-Load-Balancer "nginx";
        }
        
        # Load balancer status endpoint
        location /lb-status {
            access_log off;
            return 200 "Load Balancer Status\n===================\nUpstream: wireguard_cluster\nMethod: least_conn\nServers: 3 configured (wg-vpn, wg-vpn-2, wg-vpn-3)\nHealth: monitoring active\nUDP Load Balancing: port 51820\nAPI Load Balancing: port 8080\n";
            add_header Content-Type text/plain;
            add_header X-LB-Active-Servers "3";
            add_header X-LB-Method "least_conn";
        }
        
        # WireGuard connection endpoint (load balanced)
        location /wireguard/connect {
            # Load balance WireGuard connections
            proxy_pass http://wireguard_cluster;
            
            # Headers cho load balancing
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Load-Balancer "nginx";
            
            # Connection pooling
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            
            # Timeouts cho load balancer
            proxy_connect_timeout 5s;
            proxy_send_timeout 10s;
            proxy_read_timeout 30s;
            
            # Retry logic
            proxy_next_upstream error timeout invalid_header http_500 http_502 http_503;
            proxy_next_upstream_tries 3;
            proxy_next_upstream_timeout 10s;
        }
        
        # WireGuard management API (load balanced)
        location /api/wireguard/ {
            # Mock API response for testing (since WireGuard doesn't provide HTTP API)
            access_log off;
            return 200 '{"status":"ok","service":"wireguard","load_balancer":"nginx","upstream":"wireguard_api","servers":[{"host":"wg-vpn","port":"51820","status":"healthy","ip":"192.168.100.2"},{"host":"wg-vpn-2","port":"51820","status":"healthy","ip":"192.168.100.3"},{"host":"wg-vpn-3","port":"51820","status":"healthy","ip":"192.168.100.4"}],"vpn":{"interface":"wg0","status":"active","clients":0,"networks":["10.8.0.0/24","10.9.0.0/24","10.10.0.0/24"]},"load_balancer":{"method":"least_conn","udp_port":51820,"http_port":80},"timestamp":"$time_iso8601"}';
            add_header Content-Type application/json;
            add_header X-Load-Balancer "nginx";
            add_header X-API-Mock "true";
            
            # CORS headers
            add_header Access-Control-Allow-Origin *;
            add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS";
            add_header Access-Control-Allow-Headers "Content-Type, Authorization, X-Requested-With";
            
            # Handle preflight requests
            if ($request_method = 'OPTIONS') {
                add_header Access-Control-Allow-Origin *;
                add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS";
                add_header Access-Control-Allow-Headers "Content-Type, Authorization, X-Requested-With";
                add_header Access-Control-Max-Age 86400;
                return 204;
            }
        }
        
        # Root endpoint - Load Balancer info
        location / {
            return 200 "ðŸ”„ Nginx Load Balancer for WireGuard\n=====================================\n\nEndpoints:\n- /health          - Load balancer health\n- /lb-status       - Load balancer status\n- /wireguard/connect - WireGuard connections (load balanced)\n- /api/wireguard/  - WireGuard API (load balanced)\n\nUpstream Clusters:\n- wireguard_cluster: 3 servers (wg-vpn:51820, wg-vpn-2:51820, wg-vpn-3:51820)\n- wireguard_api:     3 servers (port 8080)\n\nLoad Balancing: Least Connections\nHealth Monitoring: Active\nUDP Load Balancing: Active on port 51820\n";
            add_header Content-Type text/plain;
            add_header X-Load-Balancer "nginx";
            add_header X-Service "wireguard-lb";
            add_header X-Servers "3";
        }
    }
    
    # HTTPS placeholder (chá»‰ HTTP cho testing Ä‘Æ¡n giáº£n)
    # server {
    #     listen 443 ssl http2 default_server;
    #     server_name _;
    #     
    #     # Self-signed cert for testing (replace with real cert later)
    #     ssl_certificate /etc/ssl/certs/ssl-cert-snakeoil.pem;
    #     ssl_certificate_key /etc/ssl/private/ssl-cert-snakeoil.key;
    #     ssl_protocols TLSv1.2 TLSv1.3;
    #     
    #     # Basic security headers
    #     add_header X-Frame-Options DENY;
    #     add_header X-Content-Type-Options nosniff;
    #     
    #     location /health {
    #         access_log off;
    #         return 200 "nginx-ssl-ok\n";
    #         add_header Content-Type text/plain;
    #     }
    #     
    #     location / {
    #         return 444; # Close connection
    #     }
    # }
}
